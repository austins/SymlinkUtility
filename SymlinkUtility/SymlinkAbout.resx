<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picLogo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>